java是解释型语言
    解释型语言，编译后不能直接被机器执行，需要解释器来执行(js,php,java)。编译型语言,编译后的代码,可以直接被机器执行(c/c++)
jdk,jre,jvm
    jdk = jre + java的开发工具（java, javac, javadoc, javap...）
    jre = jvm + java核心类库(java se标准类库)
MacOS 查看jdk路径
    /usr/libexec/java_home -V
java注意事项
    一个源文件中最多只能有一个public类，其他类的个数不限
    如果源文件包含一个public类，则文件名必须按该类名命名
java数据类型
    (1个字节等于8位)
    整数类型：byte(1个字节)，short(2个字节)，int(4个字节)，long(8个字节)
    浮点型：float(4个字节)，double(8个字节)
        浮点型在计算机中存放形式：浮点型 = 符号为 + 指数位 + 尾数位
    字符型：char(2个字节)
        字符型的存储：
            存：字符转成码值，然后在将码值转成二进制,最后存入内存。
            取：将二进制转成码值，然后再将码值转换成对应的字符，并输出。
    布尔类型：boolean(1个字节)
        不可以使用0或者非0的整数代替false和true
java基本数据类型的转换
    在进行赋值或运算时，精度小的类型自动换行为精度大的数据类型。
    char -> int -> long -> float -> double
    byte -> short -> int -> long -> float -> double
    char 和 byte,short 之间不发生自动类型转换
    byte,short,char三者在进行计算时，默认会转成int类型
    boolean 不参与自动类型转换
    表达式结果的类型自动提升为操作数中最大的类型
java基本数据类型的强制类型转换
    将容量大的数据类型转换为容量小的数据类型，会造成精度降低或溢出


=================== 运算符 =========================
自增运算符
    作为独立的语句使用，前++和后++都完全等价与i = i + 1

逻辑运算符
    a&b: 逻辑与；当a和b同时为true，则结果为true,否则为false
    a|b: 逻辑或；当a和b有一个true，则结果为true,否则为false
    a^b: 逻辑异或；当a和b不同时，则结果为true,否则为false

位运算
    &: 按位与；两位都为1，结果才为1，否则为0s
    |: 按位或；两位有一个为1，结果就为1，否则为0
    ^: 按位异或；两位一个为0，一个为1，则为1，否则为0
    ~: 按位取反；位的值为0，则为1，值为1则为0

位运算逻辑(源码，反码，补码)
    二进制的最高位是符号为，0表示整数，1表示负数
    正数的源码，反码，补码都一样
    负数的反码=它源码的符号位不变，其他位取反
    负数的补码=它的反码+1; 负数的反码=它的补码-1；
    在计算机运算的时候，都是已补码的方式来运算的
    我们需要运算结果的时候，我们需要他的源码 



====================== 面向对象 ========================
可变参数：
    可变参数的实参可以为0个或任意多个
    可变参数的实参可以为数组,可变参数的本质就是数组
    可变参数可以和普通类型的参数一起放在形参列表中，但必须保证可变参数在最后
    一个形参列表中只能出现一个可变参数

作用域
    全局变量可以不赋值,直接使用，因为有默认值。局部变量必须赋值后才能使用，因为没有默认值 

构造器
    如果没有定义构造函数，系统会自动给类生成一个无参的默认构造函数.
    一但定义了构造函数，系统自动生成的无参的默认构造函数就会被覆盖,不能使用了

对象属性的初始化
    默认初始化 -> 显式初始化 -> 构造器初始化
